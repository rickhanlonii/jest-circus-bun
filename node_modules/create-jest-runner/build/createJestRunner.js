"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRunner;
var _jestWorker = require("jest-worker");
var _pLimit = _interopRequireDefault(require("p-limit"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function determineSlowTestResult(test, result) {
  // See: https://github.com/facebook/jest/blob/acd7c83c8365140f4ecf44a456ff7366ffa31fa2/packages/jest-runner/src/runTest.ts#L287
  if (result.perfStats.runtime / 1000 > test.context.config.slowTestThreshold) {
    return {
      ...result,
      perfStats: {
        ...result.perfStats,
        slow: true
      }
    };
  }
  return result;
}
class CancelRun extends Error {
  constructor(message) {
    super(message);
    this.name = 'CancelRun';
  }
}
function createRunner(runPath, {
  getExtraOptions
} = {}) {
  return class BaseTestRunner {
    #globalConfig;
    constructor(globalConfig) {
      this.#globalConfig = globalConfig;
    }
    runTests(tests, watcher, onStart, onResult, onFailure, options) {
      return options.serial ? this._createInBandTestRun(tests, watcher, onStart, onResult, onFailure, options) : this._createParallelTestRun(tests, watcher, onStart, onResult, onFailure, options);
    }
    async _createInBandTestRun(tests, watcher, onStart, onResult, onFailure, options) {
      const runner = (await (specifier => new Promise(r => r(`${specifier}`)).then(s => _interopRequireWildcard(require(s))))(runPath.toString())).default;
      const mutex = (0, _pLimit.default)(1);
      return tests.reduce((promise, test) => mutex(() => promise.then(() => {
        if (watcher.isInterrupted()) {
          throw new CancelRun();
        }
        return onStart(test).then(() => {
          const baseOptions = {
            config: test.context.config,
            globalConfig: this.#globalConfig,
            testPath: test.path,
            rawModuleMap: watcher.isWatchMode() ? test.context.moduleMap.getRawModuleMap() : null,
            options,
            extraOptions: getExtraOptions ? getExtraOptions() : {}
          };
          return runner(baseOptions);
        });
      }).then(result => determineSlowTestResult(test, result)).then(result => onResult(test, result)).catch(err => onFailure(test, err))), Promise.resolve());
    }
    _createParallelTestRun(tests, watcher, onStart, onResult, onFailure, options) {
      const worker = new _jestWorker.Worker(runPath, {
        exposedMethods: ['default'],
        numWorkers: this.#globalConfig.maxWorkers,
        forkOptions: {
          stdio: 'inherit'
        }
      });
      const mutex = (0, _pLimit.default)(this.#globalConfig.maxWorkers);
      const runTestInWorker = test => mutex(() => {
        if (watcher.isInterrupted()) {
          throw new CancelRun();
        }
        return onStart(test).then(() => {
          const runTestOptions = {
            config: test.context.config,
            globalConfig: this.#globalConfig,
            testPath: test.path,
            rawModuleMap: watcher.isWatchMode() ? test.context.moduleMap.getRawModuleMap() : null,
            options,
            extraOptions: getExtraOptions ? getExtraOptions() : {}
          };
          return worker.default(runTestOptions);
        });
      });
      const onInterrupt = new Promise((_, reject) => {
        watcher.on('change', state => {
          if (state.interrupted) {
            reject(new CancelRun());
          }
        });
      });
      const runAllTests = Promise.all(tests.map(test => runTestInWorker(test).then(result => determineSlowTestResult(test, result)).then(testResult => onResult(test, testResult)).catch(error => onFailure(test, error))));
      const cleanup = () => {
        worker.end();
      };
      return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);
    }
  };
}